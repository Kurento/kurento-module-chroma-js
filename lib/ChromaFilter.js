/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var checkType = require('checktype');

var ChecktypeError = checkType.ChecktypeError;

var Filter = require('kurento-client').register.abstracts.Filter;

/**
 * Create a {@link module:chroma.ChromaFilter ChromaFilter}
 *
 * @classdesc
 *  ChromaFilter interface. This type of {@link module:core/abstracts.Filter Filter} makes transparent a colour
 *  range in the top layer, revealing another image behind
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:chroma.ChromaFilter
 *
 * @param {external:String} id
 */
function ChromaFilter(id){
  ChromaFilter.super_.call(this, id);
};
inherits(ChromaFilter, Filter);


/**
 * Sets the image to show on the detected chroma surface.
 *
 * @alias module:chroma.ChromaFilter.setBackground
 *
 * @param {external:String} uri
 *  URI where the image is located
 *
 * @param {module:chroma.ChromaFilter~setBackgroundCallback} [callback]
 *
 * @return {external:Promise}
 */
ChromaFilter.prototype.setBackground = function(uri, callback){
  checkType('String', 'uri', uri, {required: true});

  var params = {
    uri: uri,
  };

  return this.invoke('setBackground', params, callback);
};
/**
 * @callback module:chroma.ChromaFilter~setBackgroundCallback
 * @param {external:Error} error
 */

/**
 * Clears the image used to be shown behind the chroma surface.
 *
 * @alias module:chroma.ChromaFilter.unsetBackground
 *
 * @param {module:chroma.ChromaFilter~unsetBackgroundCallback} [callback]
 *
 * @return {external:Promise}
 */
ChromaFilter.prototype.unsetBackground = function(callback){
  return this.invoke('unsetBackground', callback);
};
/**
 * @callback module:chroma.ChromaFilter~unsetBackgroundCallback
 * @param {external:Error} error
 */

/**
 * @alias module:chroma.ChromaFilter.constructorParams
 *
 * @property {external:String} [backgroundImage]
 *  url of image to be used to replace the detected background
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter belongs
 *
 * @property {module:chroma/complexTypes.WindowParam} window
 *  Window of replacement for the {@link module:chroma.ChromaFilter ChromaFilter}
 */
ChromaFilter.constructorParams = {
  backgroundImage: {
    type: 'String',
  },

  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },

  window: {
    type: 'WindowParam',
    required: true
  },
};

/**
 * @alias module:chroma.ChromaFilter.events
 *
 * @extend module:core/abstracts.Filter.events
 */
ChromaFilter.events = Filter.events;

module.exports = ChromaFilter;

ChromaFilter.check = function(key, value)
{
  if(!(value instanceof ChromaFilter))
    throw ChecktypeError(key, ChromaFilter, value);
};
